# workflow 名称
name: GitHub Actions Demo
# run名称
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
# 触发条件
on: [push]
# 通过设置 schedule 能定时触发 workflow, 以UTC时间为准
# UTC(世界协调时)+8 -> CST(中国标准时间, 北京时间) https://datetime360.com/cn/utc-cst-china-time/
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
# schedule:
  # 可以写多个 cron, 单个cron 内也可写多个时间, 如 '30 18,6 * * *'表示 UTC18:30 或 UTC6:30
  # cron 内数值从左至右依次为
  # Minute [0,59]
  # Hour [0,23]
  # Day of the month [1,31]
  # Month of the year [1,12]
  # Day of the week ([0,6] with 0=Sunday)
  # 详见 https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07
  # - cron: '30 18 * * *'

# 环境变量, workflow级别的全局变量
env:
  GLOBAL_VAR_NAME: "global var name"
  
# 一个 workflow 由一个或多个 job 组成, jobs 并行运行
# 可通过给 job 设置 needs 将 job 穿行运行
# 例如 needs: job1 表明当前 job 需要在 job1 之后运行, needs: [job1, job2] 表示需要在 job1 和 job2 之后运行. 其中 job1, job2 是其他 job 的 ID 
jobs:
  # job ID, 当前 job 的唯一标识, 可用于流程控制
  job_0:
    # job 名称
    name: "Job 0"
    # 运行环境
    runs-on: ubuntu-latest
    # 环境变量, job级别的局部变量
    env:
      LOCAL_VAR_NAME: "local var name"
    # 当前job的输出, 在其他job中可通过 ${{needs.<job_id>.outputs.<output_name>}} 获取
    outputs:
      # 把当前job每一步的输出映为到当前job的整体输出
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.demo }}
    steps:
      # 每一个step都可以设置id, 以便于获取当前步骤的输出
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      # 将当前 step 的数据输出 
      - id: step2
        run: echo "demo=job_0's step2's output" >> "$GITHUB_OUTPUT"
      # 环境变量, 按作用域可分为 workflow级, job级, step级
      - run: echo "在job0中获取全局环境变量 $GLOBAL_VAR_NAME, 局部环境变量 $LOCAL_VAR_NAME"
      # 当前 job 的运行状态
      - run: echo "This job's status is ${{ job.status }}."
  job_id_0:
    name: "Job name"
    runs-on: ubuntu-latest
    needs: job_0
    steps:
      - run: echo "1. job's status ${{ job.status }}."
      - run: echo "2. 全局环境变量 $GLOBAL_VAR_NAME, 获取不到上一个job的局部环境变量 $LOCAL_VAR_NAME"
      # step级别的环境变量, 将上一个job的输出map到环境变量上使用
      - env:
          OUTPUT1: ${{needs.job_0.outputs.output1}}
          OUTPUT2: ${{needs.job_0.outputs.output2}}
        run: echo "2. $OUTPUT1 $OUTPUT2"
      - run: echo "3. job's status ${{ job.status }}."
#      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#      - name: Check out repository code
#        uses: actions/checkout@v3
#      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#      - name: List files in the repository
#        run: |
#          ls ${{ github.workspace }}
#      - run: echo "🍏 This job's status is ${{ job.status }}."
